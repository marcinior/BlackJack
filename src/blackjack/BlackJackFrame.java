/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package blackjack;

import java.awt.Graphics;
import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author Marcinior
 */
public class BlackJackFrame extends javax.swing.JFrame {

    /**
     * Creates new form BlackJackFrame
     */
    private int bet;
    private int money;
    private Hand dealer;
    private Hand player;
    private Deck deck;

    public BlackJackFrame() {
        initComponents();
        bet = 0;
        money = 1000;
        dealer = new Hand();
        player = new Hand();
        deck = new Deck();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        card1 = new javax.swing.JPanel();
        card1Label = new javax.swing.JLabel();
        playButton = new javax.swing.JButton();
        card8 = new javax.swing.JPanel();
        card8Label = new javax.swing.JLabel();
        card6 = new javax.swing.JPanel();
        card6Label = new javax.swing.JLabel();
        card7 = new javax.swing.JPanel();
        card7Label = new javax.swing.JLabel();
        card5 = new javax.swing.JPanel();
        card5Label = new javax.swing.JLabel();
        card2 = new javax.swing.JPanel();
        card2Label = new javax.swing.JLabel();
        card4 = new javax.swing.JPanel();
        card4Label = new javax.swing.JLabel();
        card3 = new javax.swing.JPanel();
        card3Label = new javax.swing.JLabel();
        hitButton = new javax.swing.JButton();
        standButton = new javax.swing.JButton();
        doubleButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        moneyLabel = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        betLabel = new javax.swing.JTextField();
        token5 = new javax.swing.JButton();
        token10 = new javax.swing.JButton();
        token1 = new javax.swing.JButton();
        playerPoints = new javax.swing.JTextField();
        dealerPoints = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        playerMessageLabel = new javax.swing.JLabel();
        dealerMessageLabel = new javax.swing.JLabel();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BlackJack");
        setBackground(new java.awt.Color(0, 0, 0));
        setSize(new java.awt.Dimension(700, 483));

        jPanel1.setBackground(new java.awt.Color(3, 53, 5));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("KRUPIER");
        jLabel1.setEnabled(false);
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(421, 11, 86, -1));

        jLabel2.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(186, 3, 0));
        jLabel2.setText("GRACZ");
        jLabel2.setEnabled(false);
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(222, 463, 86, -1));

        card1.setBackground(new java.awt.Color(179, 186, 198));
        card1.setMinimumSize(new java.awt.Dimension(70, 100));
        card1.setPreferredSize(new java.awt.Dimension(70, 100));

        javax.swing.GroupLayout card1Layout = new javax.swing.GroupLayout(card1);
        card1.setLayout(card1Layout);
        card1Layout.setHorizontalGroup(
            card1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(card1Layout.createSequentialGroup()
                .addComponent(card1Label)
                .addContainerGap(70, Short.MAX_VALUE))
        );
        card1Layout.setVerticalGroup(
            card1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(card1Layout.createSequentialGroup()
                .addComponent(card1Label)
                .addGap(0, 100, Short.MAX_VALUE))
        );

        jPanel1.add(card1, new org.netbeans.lib.awtextra.AbsoluteConstraints(54, 357, -1, -1));

        playButton.setText("GRAJ");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });
        jPanel1.add(playButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(32, 264, -1, -1));

        card8.setBackground(new java.awt.Color(179, 186, 198));
        card8.setPreferredSize(new java.awt.Dimension(70, 100));

        javax.swing.GroupLayout card8Layout = new javax.swing.GroupLayout(card8);
        card8.setLayout(card8Layout);
        card8Layout.setHorizontalGroup(
            card8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(card8Layout.createSequentialGroup()
                .addComponent(card8Label)
                .addGap(0, 70, Short.MAX_VALUE))
        );
        card8Layout.setVerticalGroup(
            card8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(card8Layout.createSequentialGroup()
                .addComponent(card8Label)
                .addGap(0, 100, Short.MAX_VALUE))
        );

        jPanel1.add(card8, new org.netbeans.lib.awtextra.AbsoluteConstraints(523, 37, -1, -1));

        card6.setBackground(new java.awt.Color(179, 186, 198));
        card6.setPreferredSize(new java.awt.Dimension(70, 100));

        javax.swing.GroupLayout card6Layout = new javax.swing.GroupLayout(card6);
        card6.setLayout(card6Layout);
        card6Layout.setHorizontalGroup(
            card6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(card6Layout.createSequentialGroup()
                .addComponent(card6Label)
                .addContainerGap(70, Short.MAX_VALUE))
        );
        card6Layout.setVerticalGroup(
            card6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(card6Layout.createSequentialGroup()
                .addComponent(card6Label)
                .addGap(0, 100, Short.MAX_VALUE))
        );

        jPanel1.add(card6, new org.netbeans.lib.awtextra.AbsoluteConstraints(371, 37, -1, -1));

        card7.setBackground(new java.awt.Color(179, 186, 198));
        card7.setPreferredSize(new java.awt.Dimension(70, 100));

        javax.swing.GroupLayout card7Layout = new javax.swing.GroupLayout(card7);
        card7.setLayout(card7Layout);
        card7Layout.setHorizontalGroup(
            card7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(card7Layout.createSequentialGroup()
                .addComponent(card7Label)
                .addGap(0, 70, Short.MAX_VALUE))
        );
        card7Layout.setVerticalGroup(
            card7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(card7Layout.createSequentialGroup()
                .addComponent(card7Label)
                .addGap(0, 100, Short.MAX_VALUE))
        );

        jPanel1.add(card7, new org.netbeans.lib.awtextra.AbsoluteConstraints(447, 37, -1, -1));

        card5.setBackground(new java.awt.Color(179, 186, 198));
        card5.setPreferredSize(new java.awt.Dimension(70, 100));

        javax.swing.GroupLayout card5Layout = new javax.swing.GroupLayout(card5);
        card5.setLayout(card5Layout);
        card5Layout.setHorizontalGroup(
            card5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(card5Layout.createSequentialGroup()
                .addComponent(card5Label)
                .addContainerGap(70, Short.MAX_VALUE))
        );
        card5Layout.setVerticalGroup(
            card5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(card5Layout.createSequentialGroup()
                .addComponent(card5Label)
                .addGap(0, 100, Short.MAX_VALUE))
        );

        jPanel1.add(card5, new org.netbeans.lib.awtextra.AbsoluteConstraints(295, 37, -1, -1));

        card2.setBackground(new java.awt.Color(179, 186, 198));
        card2.setPreferredSize(new java.awt.Dimension(70, 100));

        javax.swing.GroupLayout card2Layout = new javax.swing.GroupLayout(card2);
        card2.setLayout(card2Layout);
        card2Layout.setHorizontalGroup(
            card2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(card2Layout.createSequentialGroup()
                .addComponent(card2Label)
                .addContainerGap(70, Short.MAX_VALUE))
        );
        card2Layout.setVerticalGroup(
            card2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(card2Layout.createSequentialGroup()
                .addComponent(card2Label)
                .addGap(0, 100, Short.MAX_VALUE))
        );

        jPanel1.add(card2, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 357, -1, -1));

        card4.setBackground(new java.awt.Color(179, 186, 198));
        card4.setPreferredSize(new java.awt.Dimension(70, 100));

        javax.swing.GroupLayout card4Layout = new javax.swing.GroupLayout(card4);
        card4.setLayout(card4Layout);
        card4Layout.setHorizontalGroup(
            card4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(card4Layout.createSequentialGroup()
                .addComponent(card4Label)
                .addGap(0, 70, Short.MAX_VALUE))
        );
        card4Layout.setVerticalGroup(
            card4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(card4Layout.createSequentialGroup()
                .addComponent(card4Label)
                .addGap(0, 100, Short.MAX_VALUE))
        );

        jPanel1.add(card4, new org.netbeans.lib.awtextra.AbsoluteConstraints(282, 357, -1, -1));

        card3.setBackground(new java.awt.Color(179, 186, 198));
        card3.setPreferredSize(new java.awt.Dimension(70, 100));

        javax.swing.GroupLayout card3Layout = new javax.swing.GroupLayout(card3);
        card3.setLayout(card3Layout);
        card3Layout.setHorizontalGroup(
            card3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(card3Layout.createSequentialGroup()
                .addComponent(card3Label)
                .addGap(0, 70, Short.MAX_VALUE))
        );
        card3Layout.setVerticalGroup(
            card3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(card3Layout.createSequentialGroup()
                .addComponent(card3Label)
                .addGap(0, 100, Short.MAX_VALUE))
        );

        jPanel1.add(card3, new org.netbeans.lib.awtextra.AbsoluteConstraints(206, 357, -1, -1));

        hitButton.setText("HIT");
        hitButton.setEnabled(false);
        hitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hitButtonActionPerformed(evt);
            }
        });
        jPanel1.add(hitButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(383, 434, -1, -1));

        standButton.setText("STAND");
        standButton.setEnabled(false);
        standButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                standButtonActionPerformed(evt);
            }
        });
        jPanel1.add(standButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(438, 434, 83, -1));
        standButton.getAccessibleContext().setAccessibleName("");

        doubleButton.setText("DOUBLE");
        doubleButton.setEnabled(false);
        doubleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doubleButtonActionPerformed(evt);
            }
        });
        jPanel1.add(doubleButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(527, 434, 85, -1));

        jLabel11.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("STAN KONTA");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 42, 84, -1));

        moneyLabel.setEditable(false);
        moneyLabel.setText("1000");
        moneyLabel.setDisabledTextColor(new java.awt.Color(179, 186, 198));
        jPanel1.add(moneyLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 64, 84, -1));

        jLabel12.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("ZAKŁAD");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 95, 84, -1));

        betLabel.setEditable(false);
        jPanel1.add(betLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 117, 84, -1));

        token5.setIcon(new javax.swing.ImageIcon("D:\\BlackJack\\src\\blackjack\\Images\\2.png")); // NOI18N
        token5.setBorderPainted(false);
        token5.setContentAreaFilled(false);
        token5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                token5ActionPerformed(evt);
            }
        });
        jPanel1.add(token5, new org.netbeans.lib.awtextra.AbsoluteConstraints(84, 188, 52, -1));

        token10.setIcon(new javax.swing.ImageIcon("D:\\BlackJack\\src\\blackjack\\Images\\3.png")); // NOI18N
        token10.setBorderPainted(false);
        token10.setContentAreaFilled(false);
        token10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                token10ActionPerformed(evt);
            }
        });
        jPanel1.add(token10, new org.netbeans.lib.awtextra.AbsoluteConstraints(142, 188, 46, -1));

        token1.setIcon(new javax.swing.ImageIcon("D:\\BlackJack\\src\\blackjack\\Images\\1.png")); // NOI18N
        token1.setBorderPainted(false);
        token1.setContentAreaFilled(false);
        token1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                token1ActionPerformed(evt);
            }
        });
        jPanel1.add(token1, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 188, 57, -1));

        playerPoints.setEditable(false);
        playerPoints.setForeground(new java.awt.Color(186, 3, 0));
        jPanel1.add(playerPoints, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 330, 70, -1));

        dealerPoints.setEditable(false);
        dealerPoints.setForeground(new java.awt.Color(186, 3, 0));
        jPanel1.add(dealerPoints, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 140, 70, -1));

        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setEnabled(false);
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 351, 55, -1));

        playerMessageLabel.setForeground(new java.awt.Color(255, 255, 255));
        playerMessageLabel.setEnabled(false);
        jPanel1.add(playerMessageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 300, 70, 20));

        dealerMessageLabel.setForeground(new java.awt.Color(255, 255, 255));
        dealerMessageLabel.setEnabled(false);
        jPanel1.add(dealerMessageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 170, 70, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void token1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_token1ActionPerformed
        if ((Integer.parseInt(moneyLabel.getText()) - 1) < 10) {
            token10.setEnabled(false);
        }
        if ((Integer.parseInt(moneyLabel.getText()) - 1) < 5) {
            token5.setEnabled(false);
        }
        if (Integer.parseInt(moneyLabel.getText()) < 1) {
            noMoneyMessage();
        } else {
            bet++;
            money--;
            betLabel.setText(Integer.toString(bet));
            moneyLabel.setText(Integer.toString(money));
        }
        if (Integer.parseInt(moneyLabel.getText()) == 0) {
            token1.setEnabled(false);
        }

    }//GEN-LAST:event_token1ActionPerformed

    private void token10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_token10ActionPerformed
        bet += 10;
        money -= 10;
        betLabel.setText(Integer.toString(bet));
        moneyLabel.setText(Integer.toString(money));
        
        if ((Integer.parseInt(moneyLabel.getText()) - 10) < 0) {
            token10.setEnabled(false);
        }
        if ((Integer.parseInt(moneyLabel.getText()) == 0)) {
            token1.setEnabled(false);
            token5.setEnabled(false);
        }

    }//GEN-LAST:event_token10ActionPerformed

    private void token5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_token5ActionPerformed
        bet += 5;
        money -= 5;
        betLabel.setText(Integer.toString(bet));
        moneyLabel.setText(Integer.toString(money));
        
        if ((Integer.parseInt(moneyLabel.getText()) - 5) < 0) {
            token5.setEnabled(false);
        }
        if ((Integer.parseInt(moneyLabel.getText()) - 5) < 10) {
            token10.setEnabled(false);
        }
        if ((Integer.parseInt(moneyLabel.getText()) == 0)) {
            token1.setEnabled(false);
        }
    }//GEN-LAST:event_token5ActionPerformed

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        startGame();
    }//GEN-LAST:event_playButtonActionPerformed

    private void checkMoney() {
        if (Integer.parseInt(moneyLabel.getText()) >= 10) {
            token1.setEnabled(true);
            token5.setEnabled(true);
            token10.setEnabled(true);
        } else {
            if (Integer.parseInt(moneyLabel.getText()) < 10 && Integer.parseInt(moneyLabel.getText()) >= 5) {
                token1.setEnabled(true);
                token5.setEnabled(true);
            } else {
                if (Integer.parseInt(moneyLabel.getText()) < 5 && Integer.parseInt(moneyLabel.getText()) >= 1) {
                    token1.setEnabled(true);
                }
            }
        }
    }

    private void clearTable() {
        card1Label.setIcon(null);
        card2Label.setIcon(null);
        card3Label.setIcon(null);
        card4Label.setIcon(null);
        card5Label.setIcon(null);
        card6Label.setIcon(null);
        card7Label.setIcon(null);
        card8Label.setIcon(null);       
    }

    public void startGame() {
        if (betLabel.getText().isEmpty()) {
            message();
        } else {
            standButton.setEnabled(true);
            hitButton.setEnabled(true);
            doubleButton.setEnabled(true);
            clearTable();
            deck.shuffle();
            player.addCardToHand(deck.distributeCard());
            deck.removeFromDeck(deck.countOfDistributedCards - 1);
            player.addCardToHand(deck.distributeCard());
            deck.removeFromDeck(deck.countOfDistributedCards - 1);
            dealer.addCardToHand(deck.distributeCard());
            deck.removeFromDeck(deck.countOfDistributedCards - 1);
            dealer.addCardToHand(deck.distributeCard());
            deck.removeFromDeck(deck.countOfDistributedCards - 1);

            card1Label.setIcon(new javax.swing.ImageIcon(getPath(player, 1)));
            card2Label.setIcon(new javax.swing.ImageIcon(getPath(player, 2)));
            card5Label.setIcon(new javax.swing.ImageIcon(getPath(dealer, 1)));
            card6Label.setIcon(new javax.swing.ImageIcon("src\\blackjack\\Images\\karta_odwrot.jpg"));

            playerPoints.setText(Integer.toString(player.blackJackPoints()));
            
            if (dealer.blackJackPoints(1) == 11) {
                dealerPoints.setText("1/11");
            } else {
                dealerPoints.setText(Integer.toString(dealer.blackJackPoints(1)));
            }
            playButton.setEnabled(false);
            token1.setEnabled(false);
            token5.setEnabled(false);
            token10.setEnabled(false);

            dealerMessageLabel.setText("");
            playerMessageLabel.setText("");

            if (player.blackJackPoints() == 21) {
                card6Label.setIcon(new javax.swing.ImageIcon(getPath(dealer, 2)));
                dealerPoints.setText(Integer.toString(dealer.blackJackPoints()));
                standButton.setEnabled(false);
                hitButton.setEnabled(false);
                doubleButton.setEnabled(false);
                payoff();
                startGameState();
            }
        }
    }
    public void startGameState() {
        if (money == 0) {
            noMoneyMessage();
        } else {
            checkMoney();
            playButton.setEnabled(true);
            standButton.setEnabled(false);
            hitButton.setEnabled(false);
            doubleButton.setEnabled(false);
            betLabel.setText("");
            bet = 0;
            
            for (Card k : dealer.handK) {
                deck.addCardToDeck(k);
            }
            for (Card k : player.handK) {
                deck.addCardToDeck(k);
            }
            dealer.clearHand();
            player.clearHand();
        }
    }

    public String getPath(Hand hand, int cardNumber) {
        int hash1 = 0;
        int hash2 = 0;
        int hash3 = 0;
        int hash4 = 0;
        String path = "";

        switch (cardNumber) {

            case 1: {
                switch (hand.handK.get(0).getSuit()) {
                    case 1:
                        hash1 = hand.handK.get(0).getValue();
                        break;
                    case 2:
                        hash1 = hand.handK.get(0).getValue() + 13;
                        break;
                    case 3:
                        hash1 = hand.handK.get(0).getValue() + 26;
                        break;
                    case 4:
                        hash1 = hand.handK.get(0).getValue() + 39;
                        break;
                }
                path = "src\\blackjack\\Images\\" + hash1 + ".jpg";
                break;
            }
            case 2: {
                switch (hand.handK.get(1).getSuit()) {
                    case 1:
                        hash2 = hand.handK.get(1).getValue();
                        break;
                    case 2:
                        hash2 = hand.handK.get(1).getValue() + 13;
                        break;
                    case 3:
                        hash2 = hand.handK.get(1).getValue() + 26;
                        break;
                    case 4:
                        hash2 = hand.handK.get(1).getValue() + 39;
                        break;
                }
                path = "src\\blackjack\\Images\\" + hash2 + ".jpg";
                break;
            }
            case 3: {
                switch (hand.handK.get(2).getSuit()) {
                    case 1:
                        hash3 = hand.handK.get(2).getValue();
                        break;
                    case 2:
                        hash3 = hand.handK.get(2).getValue() + 13;
                        break;
                    case 3:
                        hash3 = hand.handK.get(2).getValue() + 26;
                        break;
                    case 4:
                        hash3 = hand.handK.get(2).getValue() + 39;
                        break;
                }
                path = "src\\blackjack\\Images\\" + hash3 + ".jpg";
                break;
            }
            case 4: {
                switch (hand.handK.get(3).getSuit()) {
                    case 1:
                        hash4 = hand.handK.get(3).getValue();
                        break;
                    case 2:
                        hash4 = hand.handK.get(3).getValue() + 13;
                        break;
                    case 3:
                        hash4 = hand.handK.get(3).getValue() + 26;
                        break;
                    case 4:
                        hash4 = hand.handK.get(3).getValue() + 39;
                        break;
                }
                path = "src\\blackjack\\Images\\" + hash4 + ".jpg";
                break;
            }
        }
        return path;
    }
    private void hitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hitButtonActionPerformed
        doubleButton.setEnabled(false);
        player.addCardToHand(deck.distributeCard());
        deck.removeFromDeck(deck.countOfDistributedCards - 1);
        
        if (player.cardInHand() == 3) {
            card3Label.setIcon(new javax.swing.ImageIcon(getPath(player, player.cardInHand())));
            playerPoints.setText(Integer.toString(player.blackJackPoints()));
            
            if (player.blackJackPoints() >= 21) {
                hitButton.setEnabled(false);
                standButtonActionPerformed(evt);
            }
        } else {
            if (player.cardInHand() == 4) {
                card4Label.setIcon(new javax.swing.ImageIcon(getPath(player, player.cardInHand())));
                playerPoints.setText(Integer.toString(player.blackJackPoints()));
                hitButton.setEnabled(false);
                standButtonActionPerformed(evt);
            }
        }
    }//GEN-LAST:event_hitButtonActionPerformed

    private void standButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_standButtonActionPerformed
        doubleButton.setEnabled(false);
        card6Label.setIcon(new javax.swing.ImageIcon(getPath(dealer, 2)));
        dealerPoints.setText(Integer.toString(dealer.blackJackPoints()));
        int cardNumber = 3;
        
        while (dealer.blackJackPoints() < 17 && dealer.cardInHand() <= 4) {
            dealer.addCardToHand(deck.distributeCard());
            deck.removeFromDeck(deck.countOfDistributedCards - 1);
            dealerPoints.setText(Integer.toString(dealer.blackJackPoints()));
            
            if (cardNumber == 3) {
                card7Label.setIcon(new javax.swing.ImageIcon(getPath(dealer, cardNumber)));
            } else {
                card8Label.setIcon(new javax.swing.ImageIcon(getPath(dealer, cardNumber)));
            }
            cardNumber++;
        }
        payoff();
        startGameState();
    }//GEN-LAST:event_standButtonActionPerformed

    private void doubleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doubleButtonActionPerformed
        bet = 2 * (Integer.parseInt(betLabel.getText()));
        money -= (bet / 2);
        moneyLabel.setText(Integer.toString(money));
        betLabel.setText(Integer.toString(bet));
        doubleButton.setEnabled(false);
        hitButtonActionPerformed(evt);
        standButtonActionPerformed(evt);
        hitButton.setEnabled(false);
        standButton.setEnabled(false);
    }//GEN-LAST:event_doubleButtonActionPerformed
    private void payoff() {
        if (player.blackJackPoints() == 21 && dealer.blackJackPoints() == 21) {
            playerPoints.setText("BlackJack");
            dealerPoints.setText("BlackJack");
            money += Integer.parseInt(betLabel.getText());
            moneyLabel.setText(Integer.toString(money));
            playerMessageLabel.setText("REMIS");
            dealerMessageLabel.setText("REMIS");
        } else {
            if (player.blackJackPoints() == 21 && dealer.blackJackPoints() != 21) {
                playerPoints.setText("BlackJack");
                bet = (Integer.parseInt(betLabel.getText()) + (Integer.parseInt(betLabel.getText()) * 3 / 2));
                money = Integer.parseInt(moneyLabel.getText());
                money += bet;
                moneyLabel.setText(Integer.toString(money));
                dealerMessageLabel.setText("PRZEGRANA");
                playerMessageLabel.setText("WYGRANA");
            } else {
                if ((player.blackJackPoints() > 21 && dealer.blackJackPoints() > 21)
                        || player.blackJackPoints() == dealer.blackJackPoints()) {
                    money += Integer.parseInt(betLabel.getText());
                    moneyLabel.setText(Integer.toString(money));
                    playerMessageLabel.setText("REMIS");
                    dealerMessageLabel.setText("REMIS");
                } else {
                    if ((player.blackJackPoints() < 21 && dealer.blackJackPoints() > 21)
                            || ((player.blackJackPoints() < 21 && dealer.blackJackPoints() < 21)
                            && (player.blackJackPoints() > dealer.blackJackPoints()))) {
                        money += 2 * (Integer.parseInt(betLabel.getText()));
                        moneyLabel.setText(Integer.toString(money));
                        playerMessageLabel.setText("WYGRANA");
                        dealerMessageLabel.setText("PRZEGRANA");
                    } else {
                        if ((player.blackJackPoints() > 21 && dealer.blackJackPoints() < 21)
                                || ((player.blackJackPoints() < 21 && dealer.blackJackPoints() <= 21)
                                && (player.blackJackPoints() < dealer.blackJackPoints())
                                || ((player.blackJackPoints() > 21 && dealer.blackJackPoints() <= 21)))) {
                            playerMessageLabel.setText("PRZEGRANA");
                            dealerMessageLabel.setText("WYGRANA");
                            if (dealer.blackJackPoints() == 21) {
                                dealerPoints.setText("BlackJack");
                            }
                        }
                    }
                }
            }
        }
    }

    public void message() {

        JOptionPane.showMessageDialog(null, "Podaj kwote zakładu!", "Niedozwolona czynność", JOptionPane.OK_OPTION);
        standButton.setEnabled(false);
        hitButton.setEnabled(false);
        doubleButton.setEnabled(false);
    }

    private void noMoneyMessage() {
        int reply = JOptionPane.showConfirmDialog(null, "Nie masz już forsy!\n Chcesz grać od nowa?", "Uwaga!", JOptionPane.YES_NO_OPTION);
        
        if (reply == JOptionPane.YES_OPTION) {
            moneyLabel.setText("1000");
            money = 1000;
            clearTable();
            playerPoints.setText("");
            dealerPoints.setText("");
            startGameState();
        } else {
            System.exit(0);
        }
        standButton.setEnabled(false);
        hitButton.setEnabled(false);
        doubleButton.setEnabled(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BlackJackFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BlackJackFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BlackJackFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BlackJackFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BlackJackFrame().setVisible(true);
            }

        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField betLabel;
    private javax.swing.JPanel card1;
    private javax.swing.JLabel card1Label;
    private javax.swing.JPanel card2;
    private javax.swing.JLabel card2Label;
    private javax.swing.JPanel card3;
    private javax.swing.JLabel card3Label;
    private javax.swing.JPanel card4;
    private javax.swing.JLabel card4Label;
    private javax.swing.JPanel card5;
    private javax.swing.JLabel card5Label;
    private javax.swing.JPanel card6;
    private javax.swing.JLabel card6Label;
    private javax.swing.JPanel card7;
    private javax.swing.JLabel card7Label;
    private javax.swing.JPanel card8;
    private javax.swing.JLabel card8Label;
    private javax.swing.JLabel dealerMessageLabel;
    private javax.swing.JTextField dealerPoints;
    private javax.swing.JButton doubleButton;
    private javax.swing.JButton hitButton;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField moneyLabel;
    private javax.swing.JButton playButton;
    private javax.swing.JLabel playerMessageLabel;
    private javax.swing.JTextField playerPoints;
    private javax.swing.JButton standButton;
    private javax.swing.JButton token1;
    private javax.swing.JButton token10;
    private javax.swing.JButton token5;
    // End of variables declaration//GEN-END:variables
}
